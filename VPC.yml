AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation VPC Template
  Ce script va créer 1 VPC + 3 Subnets (2 public et 1 privée) + 3 security group. Tout les subnets auront comme route par defaut l'internet gateway
Resources:

#Création du VPC et des subnets
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: 'MonVPC'
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: 'MonVPC-privée-c'
      VpcId: !Ref VPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.100.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 'MonVPC-public-a'
      VpcId: !Ref VPC
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 10.0.101.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 'MonVPC-public-b'
      VpcId: !Ref VPC
 
 #Création de l'internet Gateway et ratachement au VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'MonVPC-InternetGateway'
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
      
 #Declaration des routes pour les differents subnets
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MonVPC-route-public-a
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MonVPC-route-public-b
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MonVPC-route-privée-c
  AttachPrivateSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PrivateSubnetC

  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableC
 
#Création des security groups qui seront utilisé plus tard 
  WebsiteEC2SecurityGroup: 
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  Website EC2 security group 
      VpcId: 
         Ref: VPC  
      SecurityGroupEgress: 
        - IpProtocol:  -1
          CidrIp:  0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: 
             Ref: WebsiteLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          
  WebsiteLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      
  DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
            VpcId: !Ref VPC
            GroupDescription: Access to database
            SecurityGroupIngress:
                - SourceSecurityGroupId: 
                     Ref: WebsiteEC2SecurityGroup
                  FromPort: 3306
                  ToPort: 3306
                  IpProtocol: tcp

